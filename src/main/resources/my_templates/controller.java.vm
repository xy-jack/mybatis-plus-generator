package ${package.Controller};

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import com.yd.common.ResultObj;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;

import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @date ${date}
 */
@RestController
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@Slf4j
public class ${table.controllerName} {

    @Autowired
    public ${table.serviceName} ${table.serviceName};


    /**
     * 分页查询数据
     *
     * @param bootStrapTable  分页信息
     * @param ${table.entityPath} 查询条件
     * @return
     */
    @PostMapping("/page")
    public ResultObj page(@RequestBody Page<${entity}> ${table.entityPath}){
        try{
            return new ResultObj(${table.serviceName}.page(${table.entityPath}));
        }catch(Exception e){
            log.error("get${entity}Page -=- {}",e.toString());
            throw e;
        }
    }

    /**
     * 保存和修改公用的
     *
     * @param ${table.entityPath} 传递的实体
     */
    @PostMapping("/save")
    public ResultObj save(@RequestBody ${entity} ${table.entityPath}){
        try{
            return new ResultObj(${table.serviceName}.saveOrUpdate(${table.entityPath}));
        }catch(Exception e){
            log.error("${table.entityPath}Save -=- {}", e.toString());
            throw e;
        }
     }

    /**
     * 根据id删除对象
     *
     * @param id  实体ID
     */
    @DeleteMapping("/delete/{id}")
    public ResultObj delete(@PathVariable("id") Long id){
        try{
            return new ResultObj(${table.serviceName}.removeById(id));
        }catch(Exception e){
            log.error("${table.entityPath}Delete -=- {}",e.toString());
            throw e;
        }
     }

    /**
     * 批量删除对象
     *
     * @param item 实体集合ID
     */
    @GetMapping("/batchDelete/{ids}")
    public ResultObj deleteBatchIds(@PathVariable("ids") String item){
        try{
            return new ResultObj(${table.serviceName}.removeByIds(ids));
        }catch(Exception e){
            log.error("${table.entityPath}BatchDelete -=- {}",e.toString());
            throw e;
        }
    }


}
